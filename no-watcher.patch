diff --git a/vendor/github.com/chromedp/chromedp/chromedp.go b/vendor/github.com/chromedp/chromedp/chromedp.go
index faddc8b..5f74858 100644
--- a/vendor/github.com/chromedp/chromedp/chromedp.go
+++ b/vendor/github.com/chromedp/chromedp/chromedp.go
@@ -91,42 +91,24 @@ func New(ctxt context.Context, opts ...Option) (*CDP, error) {
 
 	// watch handlers
 	if c.watch == nil {
-		c.watch = c.r.Client().WatchPageTargets(ctxt)
-	}
+		c2, cancel := context.WithCancel(ctxt)
+		defer cancel()
 
-	go func() {
-		for t := range c.watch {
-			if t == nil {
-				return
-			}
-			go c.AddTarget(ctxt, t)
-		}
-	}()
+		c.watch = c.r.Client().WatchPageTargets(c2)
+	}
 
 	// TODO: fix this
-	timeout := time.After(defaultNewTargetTimeout)
-
-	// wait until at least one target active
-	for {
-		select {
-		default:
-			c.RLock()
-			exists := c.cur != nil
-			c.RUnlock()
-			if exists {
-				return c, nil
-			}
-
-			// TODO: fix this
-			time.Sleep(DefaultCheckDuration)
-
-		case <-ctxt.Done():
-			return nil, ctxt.Err()
-
-		case <-timeout:
-			return nil, errors.New("timeout waiting for initial target")
-		}
+	select {
+	case <-ctxt.Done():
+		return nil, ctxt.Err()
+	case <-time.After(defaultNewTargetTimeout):
+		return nil, errors.New("timeout waiting for initial target")
+
+	case t := <-c.watch:
+		c.AddTarget(ctxt, t)
 	}
+
+	return c, nil
 }
 
 // AddTarget adds a target using the supplied context.
